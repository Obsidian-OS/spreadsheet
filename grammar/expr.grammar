@detectDelim
@top Formula { expression }

@precedence {
    eq @left,
    bin @left,
    comp @left,
    add @left,
    mul @left,
    exp @left
}

expression {
    literal |
    Access |
    Call |
    operation |
    List |
    AssociativeArray |
    bracketedExpression
}

literal[@isGroup=Literal] {
    Number |
    Boolean |
    NamedColumn |
    Address |
    key
}

key { Name | String }

Access { ~key (literal | bracketedExpression) "." key }

Call { ~key (literal | bracketedExpression) "(" delimited<expression> ")" }

operation {
    expression !eq ("==" | "!=") expression |
    expression !bin ("&&" | "||" | "!") expression |
    expression !comp ("<" | ">") expression |
    expression !add ("+" | "-") expression |
    expression !mul ("*" | "/" | "%") expression |
    expression !exp ("^") expression
}

List { "[" ~obj delimited<expression> "]" }

AssociativeArray { "[" ~obj delimited<(key "=" expression)> "]" }

delimited<body> { ( body ("," body)* )? }

bracketedExpression { "(" expression ")" }

@local tokens {
    strEnd { '"' }
    strEscape { '\\' ![u] }
    strUnicodeEscape { '\\u{' _* '}' }

    @else content
}

@skip {} {
    NamedColumn { ~col "{{" content? "}}" }
    Address { ~col "{" content? "}" }
    String { '"' (content | strEscape | strUnicodeEscape)* strEnd }
}

@tokens {

    alpha { $[_\u{a1}-\u{10ffff}] }
    alphanumeric { $[_\u{a1}-\u{10ffff}\d] }

    Boolean {
        "true" | "false"
    }

    Name {
        alpha alphanumeric*
    }

    Number {
        ("-"? $[0-9]+ ) |
        ("-"? "0x" $[0-9a-fA-Z_]+) |
        ("-"? "0o" $[0-7]+) |
        ("-"? "0b" $[01]+) |
        ("-"? $[0-9]+ "." $[0-9]*)
    }
}